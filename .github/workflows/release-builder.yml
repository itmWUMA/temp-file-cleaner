# .github/workflows/release-builder.yml
# GitHub Actions 工作流：用于在创建 Release 时自动构建跨平台的可执行文件

name: Build and Release Executables

# 触发条件：当一个新的 Release 被创建时
on:
  release:
    types: [created]

jobs:
  build:
    # 任务名称
    name: Build on ${{ matrix.os }}
    # 使用矩阵策略，在多个操作系统上并行运行
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # 授予工作流写入（上传）Release 资产的权限
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          # 为 Windows 系统定义特殊变量
          - os: windows-latest
            EXECUTABLE_NAME: tempcleaner.exe
            INSTALL_SCRIPT: install.bat
            ARCHIVE_NAME: tempcleaner-windows-amd64.zip
          # 为 Linux 系统定义特殊变量
          - os: ubuntu-latest
            EXECUTABLE_NAME: tempcleaner
            INSTALL_SCRIPT: install.sh
            ARCHIVE_NAME: tempcleaner-linux-amd64.zip
          # 为 macOS 系统定义特殊变量
          - os: macos-latest
            EXECUTABLE_NAME: tempcleaner
            INSTALL_SCRIPT: install.sh
            ARCHIVE_NAME: tempcleaner-macos-amd64.zip

    steps:
      # 步骤1: 检出仓库代码
      - name: Check out repository
        uses: actions/checkout@v4

      # 步骤2: 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # 您可以指定需要的 Python 版本

      # 步骤3: 安装依赖库和 PyInstaller
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 步骤4: 使用 PyInstaller 打包
      - name: Build with PyInstaller
        run: pyinstaller --onefile --name ${{ matrix.EXECUTABLE_NAME }} temp_cleaner/main.py

      # 步骤5: 准备用于发布的产物
      - name: Prepare artifacts
        run: |
          # 创建一个发布目录
          mkdir -p release_package
          # 将可执行文件移动到发布目录
          mv dist/${{ matrix.EXECUTABLE_NAME }} release_package/
          # 将配置文件示例复制到发布目录
          cp config.yaml release_package/
          # 将对应的安装脚本复制到发布目录
          cp ${{ matrix.INSTALL_SCRIPT }} release_package/
        shell: bash # 强制在所有平台使用 bash，简化脚本

      # 步骤 6a: 在 Windows 上进行压缩
      - name: Archive release artifacts (Windows)
        if: runner.os == 'Windows' # <-- 步骤级别的 if 条件
        run: powershell -Command "Compress-Archive -Path ./release_package/* -DestinationPath ${{ matrix.ARCHIVE_NAME }}"

      # 步骤 6b: 在 Linux 和 macOS 上进行压缩
      - name: Archive release artifacts (Linux/macOS)
        if: runner.os != 'Windows' # <-- 步骤级别的 if 条件
        run: |
          cd release_package
          zip -r ../${{ matrix.ARCHIVE_NAME }} .
        shell: bash

      # 步骤7: 上传打包好的 .zip 文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.ARCHIVE_NAME }}
          asset_name: ${{ matrix.ARCHIVE_NAME }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}